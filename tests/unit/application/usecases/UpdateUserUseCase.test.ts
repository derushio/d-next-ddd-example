import {
  UpdateUserRequest,
  UpdateUserUseCase,
} from '@/layers/application/usecases/UpdateUserUseCase';
import { User } from '@/layers/domain/entities/User';
import { DomainError } from '@/layers/domain/errors/DomainError';
import { IUserRepository } from '@/layers/domain/repositories/IUserRepository';
import { UserDomainService } from '@/layers/domain/services/UserDomainService';
import { Email } from '@/layers/domain/value-objects/Email';
import { UserId } from '@/layers/domain/value-objects/UserId';

import {
  createAutoMockUserDomainService,
  createAutoMockUserRepository,
} from '@tests/utils/mocks/autoMocks';
import { beforeEach, describe, expect, it } from 'vitest';
import type { MockProxy } from 'vitest-mock-extended';

describe('UpdateUserUseCase', () => {
  let updateUserUseCase: UpdateUserUseCase;
  let mockUserRepository: MockProxy<IUserRepository>;
  let mockUserDomainService: MockProxy<UserDomainService>;

  beforeEach(() => {
    // üöÄ Ëá™Âãï„É¢„ÉÉ„ÇØÁîüÊàêÔºàvitest-mock-extendedÔºâ
    mockUserRepository = createAutoMockUserRepository();
    mockUserDomainService = createAutoMockUserDomainService();

    updateUserUseCase = new UpdateUserUseCase(
      mockUserRepository,
      mockUserDomainService,
    );
  });

  describe('execute', () => {
    it('„É¶„Éº„Ç∂„Éº„Éó„É≠„Éï„Ç£„Éº„É´„ÇíÊ≠£Â∏∏„Å´Êõ¥Êñ∞„Åß„Åç„Çã', async () => {
      // Arrange
      const existingUser = User.reconstruct(
        new UserId('existing-user-id'),
        new Email('old@example.com'),
        'Old Name',
        'hashed-password',
        new Date('2023-01-01'),
        new Date('2023-01-01'),
      );

      const request: UpdateUserRequest = {
        userId: 'existing-user-id',
        email: 'new@example.com',
        name: 'New Name',
      };

      mockUserRepository.findById.mockResolvedValue(existingUser);
      mockUserDomainService.isEmailDuplicate.mockResolvedValue(false);
      mockUserRepository.update.mockResolvedValue(undefined);

      // Act
      const result = await updateUserUseCase.execute(request);

      // Assert
      expect(result.success).toBe(true);
      expect(result.user).toBeDefined();
      expect(result.user?.email).toBe('new@example.com');
      expect(result.user?.name).toBe('New Name');
      expect(mockUserRepository.findById).toHaveBeenCalledWith(
        new UserId('existing-user-id'),
      );
      expect(mockUserDomainService.isEmailDuplicate).toHaveBeenCalledWith(
        new Email('new@example.com'),
      );
      expect(mockUserRepository.update).toHaveBeenCalledWith(existingUser);
    });

    it('ÂêçÂâç„ÅÆ„ÅøÊõ¥Êñ∞„Åß„Åç„Çã', async () => {
      // Arrange
      const existingUser = User.reconstruct(
        new UserId('existing-user-id'),
        new Email('test@example.com'),
        'Old Name',
        'hashed-password',
        new Date('2023-01-01'),
        new Date('2023-01-01'),
      );

      const request: UpdateUserRequest = {
        userId: 'existing-user-id',
        name: 'New Name',
      };

      mockUserRepository.findById.mockResolvedValue(existingUser);
      mockUserRepository.update.mockResolvedValue(undefined);

      // Act
      const result = await updateUserUseCase.execute(request);

      // Assert
      expect(result.success).toBe(true);
      expect(result.user?.email).toBe('test@example.com'); // Â§âÊõ¥„Åï„Çå„Å™„ÅÑ
      expect(result.user?.name).toBe('New Name');
      expect(mockUserDomainService.isEmailDuplicate).not.toHaveBeenCalled();
    });

    it('„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅÆ„ÅøÊõ¥Êñ∞„Åß„Åç„Çã', async () => {
      // Arrange
      const existingUser = User.reconstruct(
        new UserId('existing-user-id'),
        new Email('old@example.com'),
        'Test Name',
        'hashed-password',
        new Date('2023-01-01'),
        new Date('2023-01-01'),
      );

      const request: UpdateUserRequest = {
        userId: 'existing-user-id',
        email: 'new@example.com',
      };

      mockUserRepository.findById.mockResolvedValue(existingUser);
      mockUserDomainService.isEmailDuplicate.mockResolvedValue(false);
      mockUserRepository.update.mockResolvedValue(undefined);

      // Act
      const result = await updateUserUseCase.execute(request);

      // Assert
      expect(result.success).toBe(true);
      expect(result.user?.email).toBe('new@example.com');
      expect(result.user?.name).toBe('Test Name'); // Â§âÊõ¥„Åï„Çå„Å™„ÅÑ
    });

    it('Â≠òÂú®„Åó„Å™„ÅÑ„É¶„Éº„Ç∂„ÉºID„Åß„Ç®„É©„Éº„ÇíËøî„Åô', async () => {
      // Arrange
      const request: UpdateUserRequest = {
        userId: 'non-existent-id',
        name: 'New Name',
      };

      mockUserRepository.findById.mockResolvedValue(null);

      // Act
      const result = await updateUserUseCase.execute(request);

      // Assert
      expect(result.success).toBe(false);
      expect(result.error?.message).toBe('„É¶„Éº„Ç∂„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
      expect(result.error?.code).toBe('USER_NOT_FOUND');
    });

    it('ÈáçË§á„Åô„Çã„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Åß„Ç®„É©„Éº„ÇíËøî„Åô', async () => {
      // Arrange
      const existingUser = User.reconstruct(
        new UserId('existing-user-id'),
        new Email('old@example.com'),
        'Test Name',
        'hashed-password',
        new Date('2023-01-01'),
        new Date('2023-01-01'),
      );

      const request: UpdateUserRequest = {
        userId: 'existing-user-id',
        email: 'duplicate@example.com',
      };

      mockUserRepository.findById.mockResolvedValue(existingUser);
      mockUserDomainService.isEmailDuplicate.mockResolvedValue(true);

      // Act
      const result = await updateUserUseCase.execute(request);

      // Assert
      expect(result.success).toBe(false);
      expect(result.error?.message).toBe(
        '„Åì„ÅÆ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅØÊó¢„Å´‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô',
      );
      expect(result.error?.code).toBe('EMAIL_DUPLICATE');
      expect(mockUserRepository.update).not.toHaveBeenCalled();
    });

    it('ÁÑ°Âäπ„Å™ÂêçÂâç„Åß„Éâ„É°„Ç§„É≥„Ç®„É©„Éº„ÇíÈÅ©Âàá„Å´Âá¶ÁêÜ„Åô„Çã', async () => {
      // Arrange
      const existingUser = User.reconstruct(
        new UserId('existing-user-id'),
        new Email('test@example.com'),
        'Valid Name',
        'hashed-password',
        new Date('2023-01-01'),
        new Date('2023-01-01'),
      );

      const request: UpdateUserRequest = {
        userId: 'existing-user-id',
        name: '', // ÁÑ°Âäπ„Å™ÂêçÂâç
      };

      mockUserRepository.findById.mockResolvedValue(existingUser);

      // Act
      const result = await updateUserUseCase.execute(request);

      // Assert
      expect(result.success).toBe(false);
      expect(result.error?.message).toBe('ÂêçÂâç„ÅØÁ©∫ÊñáÂ≠óÂàó„Å´„Åß„Åç„Åæ„Åõ„Çì');
      expect(result.error?.code).toBe('INVALID_NAME');
      expect(mockUserRepository.update).not.toHaveBeenCalled();
    });

    it('ÁÑ°Âäπ„Å™„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Åß„Éâ„É°„Ç§„É≥„Ç®„É©„Éº„ÇíÈÅ©Âàá„Å´Âá¶ÁêÜ„Åô„Çã', async () => {
      // Arrange
      const existingUser = User.reconstruct(
        new UserId('existing-user-id'),
        new Email('test@example.com'),
        'Test Name',
        'hashed-password',
        new Date('2023-01-01'),
        new Date('2023-01-01'),
      );

      const request: UpdateUserRequest = {
        userId: 'existing-user-id',
        email: 'invalid-email', // ÁÑ°Âäπ„Å™„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ
      };

      mockUserRepository.findById.mockResolvedValue(existingUser);

      // Act
      const result = await updateUserUseCase.execute(request);

      // Assert
      expect(result.success).toBe(false);
      expect(result.error?.message).toBe('„É¶„Éº„Ç∂„ÉºÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      expect(result.error?.code).toBe('UNEXPECTED_ERROR');
      expect(mockUserRepository.update).not.toHaveBeenCalled();
    });

    it('„É™„Éù„Ç∏„Éà„É™„Ç®„É©„Éº„ÇíÈÅ©Âàá„Å´Âá¶ÁêÜ„Åô„Çã', async () => {
      // Arrange
      const existingUser = User.reconstruct(
        new UserId('existing-user-id'),
        new Email('test@example.com'),
        'Test Name',
        'hashed-password',
        new Date('2023-01-01'),
        new Date('2023-01-01'),
      );

      const request: UpdateUserRequest = {
        userId: 'existing-user-id',
        name: 'New Name',
      };

      mockUserRepository.findById.mockResolvedValue(existingUser);
      mockUserRepository.update.mockRejectedValue(new Error('Database error'));

      // Act
      const result = await updateUserUseCase.execute(request);

      // Assert
      expect(result.success).toBe(false);
      expect(result.error?.message).toBe('„É¶„Éº„Ç∂„ÉºÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      expect(result.error?.code).toBe('UNEXPECTED_ERROR');
    });
  });
});
